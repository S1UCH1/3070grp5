# Copyright 2016 Open Source Robotics Foundation, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import rclpy
from sensor_msgs.msg import Joy
from rclpy.node import Node

from std_msgs.msg import String


class CirclePublisher(Node):

    def __init__(self):
        super().__init__('cirle_publisher')
        self.publisher_ = self.create_publisher(string, 'cirle', 10)

    def timer_callback(self):
        msg = String()
        msg.data = 'siuLchi'
        self.publisher_.publish(msg)
        self.get_logger().info('Publishing: "%s"' % msg.data)


class MinimalSubscriber(Node):

    def __init__(self):
        super().__init__('joy_subscriber')
        self.subscription = self.create_subscription(
            Joy,
            'joy',
            self.listener_callback,
            10)
        self.subscription  # prevent unused variable warning

    def listener_callback(self, msg):
        # self.get_logger().info("{}".format(msg.buttons))
        if (msg.buttons[0] == 1):
        	print("sPuare button is pressed")
        if (msg.buttons[1] == 1):
        	print("cross button is pressed")
        if (msg.buttons[2] == 1):
        	print("circle button is pressed")
        if (msg.buttons[3] == 1):
        	print("triangle button is pressed")
        if (msg.buttons[4] == 1):
        	print("L1 is pressed")
        if (msg.buttons[5] == 1):
        	print("R1 is pressed")
        if (msg.buttons[6] == 1):
        	print("L2 button is pressed")
        if (msg.buttons[7] == 1):
        	print("R2 button is pressed")
        if (msg.buttons[8] == 1):
        	print("share button is pressed")
        if (msg.buttons[9] == 1):
        	print("option button is pressed")
        if (msg.buttons[10] == 1):
        	print("L3 button is pressed")
        if (msg.buttons[11] == 1):
        	print("R3 button is pressed")
        if (msg.buttons[12] == 1):
        	print("playstation button is pressed")
        if (msg.buttons[13] == 1):
        	print("touchpad is pressed")



def main(args=None):
    rclpy.init(args=args)
    
    pub = rclpy.Publisher('/siuLchi', String, queue_size=1000)

    #minimal_subscriber = MinimalSubscriber()
    #rclpy.spin(minimal_subscriber)
    #minimal_publisher = CirclePublisher()
    #rclpy.spin(minimal_publisher)

    # Destroy the node explicitly
    # (optional - otherwise it will be done automatically
    # when the garbage collector destroys the node object)
    #minimal_subscriber.destroy_node()
    #minimal_publisher.destroy_node()
    #rclpy.shutdown()


if __name__ == '__main__':
    main()
